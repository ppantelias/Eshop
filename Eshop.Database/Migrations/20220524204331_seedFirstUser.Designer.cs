// <auto-generated />
using System;
using Eshop.Database.ApplicationDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eshop.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220524204331_seedFirstUser")]
    partial class seedFirstUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BrandCategory", b =>
                {
                    b.Property<Guid>("BrandsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BrandCategory");
                });

            modelBuilder.Entity("BrandCoupon", b =>
                {
                    b.Property<Guid>("BrandsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandsId", "CouponsId");

                    b.HasIndex("CouponsId");

                    b.ToTable("BrandCoupon");
                });

            modelBuilder.Entity("BrandDiscount", b =>
                {
                    b.Property<Guid>("BrandsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandsId", "DiscountsId");

                    b.HasIndex("DiscountsId");

                    b.ToTable("BrandDiscount");
                });

            modelBuilder.Entity("CartCoupon", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "CouponsId");

                    b.HasIndex("CouponsId");

                    b.ToTable("CartCoupon");
                });

            modelBuilder.Entity("CategoryCoupon", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "CouponsId");

                    b.HasIndex("CouponsId");

                    b.ToTable("CategoryCoupon");
                });

            modelBuilder.Entity("CategoryDiscount", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "DiscountsId");

                    b.HasIndex("DiscountsId");

                    b.ToTable("CategoryDiscount");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("CouponCustomer", b =>
                {
                    b.Property<Guid>("CouponsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CouponsId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.ToTable("CouponCustomer");
                });

            modelBuilder.Entity("CouponProduct", b =>
                {
                    b.Property<Guid>("CouponsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CouponsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CouponProduct");
                });

            modelBuilder.Entity("CustomerLoyaltyMembership", b =>
                {
                    b.Property<Guid>("CustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LoyaltyMembershipsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomersId", "LoyaltyMembershipsId");

                    b.HasIndex("LoyaltyMembershipsId");

                    b.ToTable("CustomerLoyaltyMembership");
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscountsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("DiscountProduct");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OriginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EncryptedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoyaltyPointsUsed")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Eshop.Domain.Models.CartProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RootId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRedeemed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoyaltyMembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxRedemptionTimes")
                        .HasColumnType("int");

                    b.Property<int>("RedeemedTimes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyMembershipId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsMember")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "dbi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca7c5a2b-4356-45d7-b567-ae3f755d33df"),
                            ConcurrencyStamp = "b28d60d4-4ece-4574-aacf-e1c9120f7353",
                            Name = "System",
                            UserRole = 0
                        },
                        new
                        {
                            Id = new Guid("81fef003-04af-4fdc-b67d-93c947eb3575"),
                            ConcurrencyStamp = "efe2e89d-d35d-40cc-87e9-53e7fb62dfc0",
                            Name = "FullAdmin",
                            UserRole = 1
                        },
                        new
                        {
                            Id = new Guid("cf15298a-7b4a-4cce-9649-7a687bb0aa60"),
                            ConcurrencyStamp = "992f8ebd-c418-40fe-a200-dc814c393fda",
                            Name = "ShopAdmin",
                            UserRole = 2
                        },
                        new
                        {
                            Id = new Guid("fab84446-3898-4c6e-8cea-0c352263d48a"),
                            ConcurrencyStamp = "1493bc86-bfee-4ff3-bb94-3f10405521fa",
                            Name = "StorageAdmin",
                            UserRole = 3
                        },
                        new
                        {
                            Id = new Guid("ed7333d7-0efb-4756-9a7b-621258ab76ec"),
                            ConcurrencyStamp = "77c1552e-6e50-454b-8bd0-c210bced7488",
                            Name = "UserAdmin",
                            UserRole = 4
                        },
                        new
                        {
                            Id = new Guid("2bb9c6d4-5a71-4f2f-8aa0-6fd7c9b18821"),
                            ConcurrencyStamp = "f24f9813-9d80-402d-839e-fdec6a705223",
                            Name = "Customer",
                            UserRole = 5
                        });
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ApplicationRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "dbi");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "dbi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9072622-bd0e-4cd1-8e32-6360fc5580d6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09ff5723-c950-45c2-b3ef-1a6bf01aef41",
                            Email = "fullAdmin@eshop.com",
                            EmailConfirmed = false,
                            Firstname = "FullAdmin",
                            Lastname = "FullAdmin",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDTnhz/bh4bnrxphMIkJ8OL1kYiniczYLSzIpNwMauQu0WxHCK8tv2qSJMNlcGN/fQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "dbi");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "dbi");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "dbi");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b9072622-bd0e-4cd1-8e32-6360fc5580d6"),
                            RoleId = new Guid("81fef003-04af-4fdc-b67d-93c947eb3575")
                        });
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserTokens", "dbi");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Eshop.Domain.Models.LoyaltyMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Consent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<Guid>("MembershipTierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalLoyaltyPointsGained")
                        .HasColumnType("int");

                    b.Property<int>("TotalLoyaltyPointsRedeemed")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MembershipTierId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("LoyaltyMemberships");
                });

            modelBuilder.Entity("Eshop.Domain.Models.MembershipTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<int>("HigherLimitPoints")
                        .HasColumnType("int");

                    b.Property<int>("LowerLimitPoints")
                        .HasColumnType("int");

                    b.Property<decimal>("LoyaltyWeight")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("MembershipTiers");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("OrderReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ShipmentInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipmentInfoId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Eshop.Domain.Models.OrderStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StockId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("OrderStocks");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Origin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("Eshop.Domain.Models.PaymentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CashOnDeliveryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValueBeforeTaxes")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("PaymentInfos");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<decimal>("InitialValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsNewArrival")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Eshop.Domain.Models.ShipmentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Appartment")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("ShipmentInfos");
                });

            modelBuilder.Entity("Eshop.Domain.Models.SoldProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Returned")
                        .HasColumnType("bit");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("SoldProducts");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Eshop.Domain.Models.StockOnHold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("UserCreatedById");

                    b.HasIndex("UserDeletedById");

                    b.HasIndex("UserUpdatedById");

                    b.ToTable("StocksOnHold");
                });

            modelBuilder.Entity("BrandCategory", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BrandCoupon", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BrandDiscount", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CartCoupon", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryCoupon", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryDiscount", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CouponCustomer", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CouponProduct", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerLoyaltyMembership", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.LoyaltyMembership", null)
                        .WithMany()
                        .HasForeignKey("LoyaltyMembershipsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Domain.Models.Brand", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Origin", "Origin")
                        .WithMany("Brands")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Origin");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Card", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Customer", "Customer")
                        .WithMany("Cards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Customer");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Cart", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Discount", "Discount")
                        .WithMany("Carts")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Eshop.Domain.Models.Order", "Order")
                        .WithOne("Cart")
                        .HasForeignKey("Eshop.Domain.Models.Cart", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Customer");

                    b.Navigation("Discount");

                    b.Navigation("Order");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.CartProduct", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Cart");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Category", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Category", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Parent");

                    b.Navigation("Root");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Coupon", b =>
                {
                    b.HasOne("Eshop.Domain.Models.LoyaltyMembership", null)
                        .WithMany("Coupons")
                        .HasForeignKey("LoyaltyMembershipId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Customer", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Discount", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationRole", null)
                        .WithMany("RoleClaims")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationRole", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Eshop.Domain.Models.Image", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Product");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.LoyaltyMembership", b =>
                {
                    b.HasOne("Eshop.Domain.Models.MembershipTier", "MembershipTier")
                        .WithMany("LoyaltyMemberships")
                        .HasForeignKey("MembershipTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("MembershipTier");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.MembershipTier", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Order", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.ShipmentInfo", "ShipmentInfo")
                        .WithMany("Orders")
                        .HasForeignKey("ShipmentInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Customer");

                    b.Navigation("ShipmentInfo");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.OrderStock", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Order", "Order")
                        .WithMany("OrderStocks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Stock", "Stock")
                        .WithMany("OrderStocks")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Order");

                    b.Navigation("Stock");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Origin", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.PaymentInfo", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Order", "Order")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("Eshop.Domain.Models.PaymentInfo", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Order");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Product", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Brand");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.ShipmentInfo", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Customer", "Customer")
                        .WithMany("ShipmentInfos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Customer");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.SoldProduct", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Stock", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Product");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.StockOnHold", b =>
                {
                    b.HasOne("Eshop.Domain.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserDeletedBy")
                        .WithMany()
                        .HasForeignKey("UserDeletedById");

                    b.HasOne("Eshop.Domain.Models.Identity.ApplicationUser", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UserUpdatedById");

                    b.Navigation("Stock");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Customer", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("ShipmentInfos");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Discount", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Eshop.Domain.Models.LoyaltyMembership", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("Eshop.Domain.Models.MembershipTier", b =>
                {
                    b.Navigation("LoyaltyMemberships");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Order", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("OrderStocks");

                    b.Navigation("PaymentInfo");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Origin", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Eshop.Domain.Models.ShipmentInfo", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Eshop.Domain.Models.Stock", b =>
                {
                    b.Navigation("OrderStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
